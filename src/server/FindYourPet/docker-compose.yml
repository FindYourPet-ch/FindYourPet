version: '3'

services:
  reverse-proxy:
    # The official v2 Traefik docker image
    image: traefik:v2.5
    # Enables the web UI and tells Traefik to listen to docker
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      #
      - --providers.docker.network=backend
      #
      - --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      - --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=infomaniak
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.email=contact@findyourpet.ch
      #    - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory

      - --api.insecure=true
      - --api.dashboard=true
      - --log.level=DEBUG

    labels:
      - "traefik.http.routers.api.entryPoints=traefik"
      - "traefik.http.routers.api.rule=Host(`traefik.findyourpet.ch`)"
      - "traefik.http.routers.api.service=api@internal"

    environment:
      - "INFOMANIAK_ACCESS_TOKEN=sFGfYUQuG8ltvFHmuHYetYwEFz6H8Zaqxcdt0TprmSnqYwPFiDBhCGNjjuRTHDXicuiYvk3XqdYjVu_9"
    ports:
      # The HTTP port
      - "80:80"

      - "8080:8080"

      # The HTTPS port
      - "443:443"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      - ./letsencrypt:/letsencrypt

    networks:
      - frontend
      - backend

  postgres:
    container_name: postgres
    image: postgis/postgis
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./src/database/postgres:/docker-entrypoint-initdb.d
    networks:
      - backend

  pgadmin:
    links:
      - postgres:postgres
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file:
      - .env
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - /data/pgadmin:/root/.pgadmin
    networks:
      - backend
  frontend:
    # The container with the frontend of findyourpet.ch
    container_name: frontendfyp
    image: findyourpet/frontendfyp
    env_file:
      - .env
      - .env.production
    labels:
      - "traefik.http.routers.frontend.rule=Host(`findyourpet.ch`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.domains[0].main=findyourpet.ch"
      - "traefik.http.routers.frontend.tls.domains[0].sans=*.findyourpet.ch"
    networks:
      - frontend
  backend:
    # The API Rest for findyourpet.ch. Backend of the website
    container_name: backendfyp
    links:
      - postgres:postgres
    image: findyourpet/backendfyp
    env_file:
      - .env
    ports:
      - "3000:3000"
    labels:
      - "traefik.docker.network=backend"
      - "traefik.http.routers.backend.rule=Host(`api.findyourpet.ch`)"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.backend.tls.domains[0].main=findyourpet.ch"
      - "traefik.http.routers.backend.tls.domains[0].sans=*.findyourpet.ch"
      - "traefik.http.services.backend.loadbalancer.server.port=3000"
    volumes:
      - ./files:/app/files
    networks:
      - backend
networks:
  backend:
    driver: bridge
  frontend:
